import logging
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config import BOT_TOKEN
from db import add_order, init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

init_db()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class OrderFSM(StatesGroup):
    awaiting_payment_type = State()
    awaiting_item_name = State()
    awaiting_add_confirmation = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
user_last_bot_message = {}


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def send_main_menu(user_id, chat_id):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîò –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete")],
            [InlineKeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="report")],
        ]
    )
    msg = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    user_last_bot_message[user_id] = msg.message_id


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
async def edit_or_send(user_id, chat_id, text, reply_markup=None):
    last_msg_id = user_last_bot_message.get(user_id)
    try:
        if last_msg_id:
            await bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=last_msg_id,
                reply_markup=reply_markup,
            )
        else:
            msg = await bot.send_message(chat_id, text, reply_markup=reply_markup)
            user_last_bot_message[user_id] = msg.message_id
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


# /start
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await send_main_menu(message.from_user.id, message.chat.id)


# ‚ûï –®–∞–≥ 1 ‚Äî –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data == "add")
async def add_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(OrderFSM.awaiting_payment_type)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–π", callback_data="pay_cash")],
            [InlineKeyboardButton(text="–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π", callback_data="pay_card")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_add")],
        ]
    )
    await edit_or_send(
        call.from_user.id, call.message.chat.id, "üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:", kb
    )


# ‚ûï –®–∞–≥ 2 ‚Äî –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.callback_query(F.data.in_(["pay_cash", "pay_card"]))
async def payment_type_selected(call: CallbackQuery, state: FSMContext):
    payment = "–ù–∞–ª–∏—á–Ω—ã–π" if call.data == "pay_cash" else "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
    await state.update_data(payment_type=payment)
    await state.set_state(OrderFSM.awaiting_item_name)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="add")],
        ]
    )
    await edit_or_send(
        call.from_user.id,
        call.message.chat.id,
        f"üîπ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {payment}, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –∏–ª–∏ –¥–µ—Å–µ—Ä—Ç–∞:",
        kb,
    )


# ‚ûï –®–∞–≥ 2 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@router.message(OrderFSM.awaiting_item_name)
async def item_name_entered(message: Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id)
    await state.update_data(item_name=message.text)
    data = await state.get_data()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_add")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")],
        ]
    )
    await state.set_state(OrderFSM.awaiting_add_confirmation)
    await edit_or_send(
        message.from_user.id,
        message.chat.id,
        f"üîπ –î–æ–±–∞–≤–∏—Ç—å ¬´{data['payment_type']}, {data['item_name']}¬ª?",
        kb,
    )


# ‚ûï –®–∞–≥ 3 ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.callback_query(F.data == "confirm_add")
async def confirm_add(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    now = datetime.now().strftime("%Y-%m-%d %H:%M")

    add_order(
        payment_type=data["payment_type"],
        item_name=data["item_name"],
        user_id=call.from_user.id,
        username=call.from_user.username or "",
    )
    await bot.send_message(
        call.message.chat.id,
        f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç {now}, {data['payment_type']}, {data['item_name']} –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
    )
    await state.clear()
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await send_main_menu(call.from_user.id, call.message.chat.id)


# ‚õî –û—Ç–º–µ–Ω–∞ (–ù–∞–∑–∞–¥ –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞)
@router.callback_query(F.data == "cancel_add")
async def cancel_add(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await send_main_menu(call.from_user.id, call.message.chat.id)


# üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message()
async def clean_unexpected_messages(message: Message):
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
