# bot.py

import logging
import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from config import BOT_TOKEN, GROUP_CHAT_ID
from db import init_db
from keyboards import show_main_menu
from utils import send_and_track

# –†–æ—É—Ç–µ—Ä—ã
from handlers import add, delete, report, misc, menu, chat_events

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
logging.basicConfig(level=logging.INFO)
init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(add.router)
dp.include_router(delete.router)
dp.include_router(report.router)
dp.include_router(misc.router)
dp.include_router(menu.router)
dp.include_router(chat_events.router)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.chat.type == "private", F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    # –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # 1) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    welcome = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞—Å—Å–∏—Ä–∞.\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞—à–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.\n"
        "  –Ø–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å —Ä–∞–∑–±–µ—Ä—ë—Ç –∏—Ö –∏ —Å–æ–±–µ—Ä—É –¥–ª—è –≤–∞—Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.\n"
        "‚Ä¢ –í—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É –±–∞—Ä–∏—Å—Ç–∞.\n"
        "‚Ä¢ –£–¥–∞–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –∫–Ω–æ–ø–∫–æ–π ¬´‚ùå –£–¥–∞–ª–∏—Ç—å¬ª.\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –æ—Ç—á—ë—Ç—ã –∫–Ω–æ–ø–∫–æ–π ¬´üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç¬ª.\n\n"
        "–ü–æ–µ—Ö–∞–ª–∏!"
    )
    await send_and_track(bot, message.from_user.id, message.chat.id, welcome)

    # 2) –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    await show_main_menu(message.from_user.id, message.chat.id, bot)


async def _log_configured_chats() -> None:
    raw_ids = (GROUP_CHAT_ID or "").split(",")
    chat_ids = [cid.strip() for cid in raw_ids if cid.strip()]

    if not chat_ids:
        logging.warning("GROUP_CHAT_ID is not configured; –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã.")
        return

    for raw_id in chat_ids:
        chat_id: int | str = raw_id
        if raw_id.lstrip("-+").isdigit():
            try:
                chat_id = int(raw_id)
            except ValueError:
                pass
        try:
            chat = await bot.get_chat(chat_id)
            logging.info(
                "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ '%s' (id=%s, type=%s)",
                chat.title or chat.id,
                chat.id,
                chat.type,
            )
        except Exception as exc:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç %s: %s", raw_id, exc)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    await _log_configured_chats()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
