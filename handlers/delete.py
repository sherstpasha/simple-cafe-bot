# handlers/delete.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime
from db import get_user_orders, delete_order, log_action, delete_orders_today
from keyboards import show_main_menu, confirm_keyboard
from utils import send_and_track


router = Router()

ORDERS_PER_PAGE = 5


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "delete")
async def show_orders(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(offset=0)
    await display_orders(call, state, offset=0)


# –ö–Ω–æ–ø–∫–∞ "‚è≠ –î–∞–ª–µ–µ"
@router.callback_query(F.data == "next_page")
async def next_page(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    offset = data.get("offset", 0) + ORDERS_PER_PAGE
    await state.update_data(offset=offset)
    await display_orders(call, state, offset)


# –ö–Ω–æ–ø–∫–∞ "üîô –í –Ω–∞—á–∞–ª–æ"
@router.callback_query(F.data == "reset_page")
async def reset_page(call: CallbackQuery, state: FSMContext):
    await state.update_data(offset=0)
    await display_orders(call, state, offset=0)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
async def display_orders(call: CallbackQuery, state: FSMContext, offset: int):
    orders = get_user_orders(call.from_user.id)
    page = orders[offset : offset + ORDERS_PER_PAGE]

    if not page:
        await call.message.edit_text("üî∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)
        return

    text_lines = []
    buttons = []
    for idx, order in enumerate(page, start=1):
        try:
            dt = datetime.fromisoformat(order["date"])
            formatted = dt.strftime("%Y-%m-%d %H:%M")
        except Exception:
            formatted = order["date"]

        text_lines.append(
            f"{idx}. {formatted} | {order['payment_type']} | {order['item_name']}"
        )
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ ID –∑–∞–∫–∞–∑–∞
        buttons.append(
            [InlineKeyboardButton(text=str(idx), callback_data=f"del_{order['id']}")]
        )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    navigation = []
    if offset + ORDERS_PER_PAGE < len(orders):
        navigation.append(
            InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data="next_page")
        )
    if offset > 0:
        navigation.append(
            InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="reset_page")
        )

    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    control = [
        InlineKeyboardButton(
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="clear_today"
        ),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"),
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=buttons + [navigation] + [control])
    await call.message.edit_text(
        "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n" + "\n".join(text_lines), reply_markup=markup
    )


# –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
@router.callback_query(F.data.startswith("del_"))
async def delete_one(call: CallbackQuery, state: FSMContext):
    order_id = int(call.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID
    orders = get_user_orders(call.from_user.id)
    order = next((o for o in orders if o["id"] == order_id), None)

    if order is None:
        await call.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    delete_order(order_id, call.from_user.id)

    # –õ–æ–≥–∏—Ä—É–µ–º
    log_action(
        action_type="delete",
        payment_type=order["payment_type"],
        item_name=order["item_name"],
        user_id=call.from_user.id,
        username=call.from_user.username or "",
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –µ—â—ë –≤–∏—Å–∏—Ç)
    try:
        await call.message.delete()
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    from utils import send_and_track

    try:
        dt = datetime.fromisoformat(order["date"])
        formatted = dt.strftime("%Y-%m-%d %H:%M")
    except Exception:
        formatted = order["date"]

    await send_and_track(
        bot=call.bot,
        user_id=call.from_user.id,
        chat_id=call.message.chat.id,
        text=f"‚ùå –ó–∞–ø–∏—Å—å –æ—Ç: {formatted}, {order['payment_type']}, {order['item_name']} —É–¥–∞–ª–µ–Ω–∞.",
    )


# –û—á–∏—Å—Ç–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@router.callback_query(F.data == "clear_today")
async def confirm_clear_today(call: CallbackQuery):
    markup = confirm_keyboard("‚úÖ –û—á–∏—Å—Ç–∏—Ç—å", "confirm_clear", "cancel_delete")
    await call.message.edit_text(
        "üî∏ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=markup
    )


@router.callback_query(F.data == "confirm_clear")
async def do_clear_today(call: CallbackQuery, state: FSMContext):
    count, deleted_orders = delete_orders_today(call.from_user.id)
    for order in deleted_orders:
        log_action(
            "–æ—á–∏—Å—Ç–∫–∞_—Å–µ–≥–æ–¥–Ω—è",
            order["payment_type"],
            order["item_name"],
            call.from_user.id,
            call.from_user.username or "",
        )

    await state.clear()

    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await call.message.delete()
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await send_and_track(
        bot=call.bot,
        user_id=call.from_user.id,
        chat_id=call.message.chat.id,
        text=f"‚úÖ –û—á–∏—â–µ–Ω–æ {count} –∑–∞–ø–∏—Å–∏(–µ–π) –∑–∞ {datetime.now().date()}",
    )

    # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)


# –û—Ç–º–µ–Ω–∞
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)
