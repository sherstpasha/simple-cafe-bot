# handlers/delete.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime
from db import (
    get_user_orders_with_items,
    delete_orders_today,
    delete_entire_order,
    log_action,
)
from keyboards import show_main_menu, confirm_keyboard
from utils import send_and_track, notify_temp


router = Router()

ORDERS_PER_PAGE = 5


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "delete")
async def show_orders(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(offset=0)
    await display_orders(call, state, offset=0)


# –ö–Ω–æ–ø–∫–∞ "‚è≠ –î–∞–ª–µ–µ"
@router.callback_query(F.data == "next_page")
async def next_page(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    offset = data.get("offset", 0) + ORDERS_PER_PAGE
    await state.update_data(offset=offset)
    await display_orders(call, state, offset)


# –ö–Ω–æ–ø–∫–∞ "üîô –í –Ω–∞—á–∞–ª–æ"
@router.callback_query(F.data == "reset_page")
async def reset_page(call: CallbackQuery, state: FSMContext):
    await state.update_data(offset=0)
    await display_orders(call, state, offset=0)


async def display_orders(call: CallbackQuery, state: FSMContext, offset: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (—Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ —Å—É–º–º–∞–º–∏).
    """
    orders = get_user_orders_with_items(call.from_user.id)
    page = orders[offset : offset + ORDERS_PER_PAGE]

    if not page:
        # –≤–º–µ—Å—Ç–æ edit_text ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notify_temp(call, "üî∏ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)
        return

    text_lines = []
    buttons = []
    for idx, order in enumerate(page, start=1):
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        try:
            dt = datetime.fromisoformat(order["date"])
            formatted = dt.strftime("%Y-%m-%d %H:%M")
        except Exception:
            formatted = order["date"]

        # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        items_summary = "; ".join(
            f"{it['item_name']}√ó{it['quantity']}({it['price']}‚ÇΩ)"
            for it in order["items"]
        )
        text_lines.append(
            f"{idx}. {formatted} | {order['payment_type']} | {items_summary} | –ò—Ç–æ–≥–æ: {order['total']}‚ÇΩ"
        )

        buttons.append(
            [InlineKeyboardButton(text=str(idx), callback_data=f"del_{order['id']}")]
        )

    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav = []
    if offset + ORDERS_PER_PAGE < len(orders):
        nav.append(InlineKeyboardButton(text="‚è≠ –î–∞–ª–µ–µ", callback_data="next_page"))
    if offset > 0:
        nav.append(InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="reset_page"))

    control = [
        InlineKeyboardButton(
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="clear_today"
        ),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"),
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=buttons + [nav] + [control])
    await call.message.edit_text(
        "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n" + "\n".join(text_lines), reply_markup=markup
    )


@router.callback_query(F.data.startswith("del_"))
async def delete_one(call: CallbackQuery, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ä–∞–∑—É –≤–µ—Å—å –∑–∞–∫–∞–∑ (orders + –≤—Å–µ –µ–≥–æ order_items),
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏ —Å—É–º–º—É.
    """
    order_id = int(call.data.split("_", 1)[1])
    username = call.from_user.username or ""

    # —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    items = delete_entire_order(order_id, call.from_user.id, username)
    if not items:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.", show_alert=True)
        return

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await call.message.delete()
    except:
        pass

    # —Å–æ–±–∏—Ä–∞–µ–º summary
    total = sum(it["price"] * it["quantity"] for it in items)
    summary = "\n".join(
        f"- {it['item_name']} √ó{it['quantity']} ‚Äî {it['price']}‚ÇΩ" for it in items
    )

    await send_and_track(
        bot=call.bot,
        user_id=call.from_user.id,
        chat_id=call.message.chat.id,
        text=(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} —É–¥–∞–ª—ë–Ω:\n{summary}\n\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"),
    )

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)


# –û—á–∏—Å—Ç–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
@router.callback_query(F.data == "clear_today")
async def confirm_clear_today(call: CallbackQuery):
    await call.answer()  # ACK
    kb = confirm_keyboard("‚úÖ –û—á–∏—Å—Ç–∏—Ç—å", "confirm_clear", "cancel_delete")
    await call.message.edit_text(
        "üî∏ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb
    )


@router.callback_query(F.data == "confirm_clear")
async def do_clear_today(call: CallbackQuery, state: FSMContext):
    await call.answer()  # ACK

    today = datetime.now().date()
    orders = get_user_orders_with_items(call.from_user.id)
    deleted_count = 0

    for order in orders:
        try:
            order_date = datetime.fromisoformat(order["date"]).date()
        except Exception:
            continue
        if order_date == today:
            items = delete_entire_order(
                order["id"], call.from_user.id, call.from_user.username or ""
            )
            if items:
                deleted_count += 1
                for it in items:
                    log_action(
                        action_type="–æ—á–∏—Å—Ç–∫–∞_—Å–µ–≥–æ–¥–Ω—è",
                        payment_type=order["payment_type"],
                        item_name=it["item_name"],
                        user_id=call.from_user.id,
                        username=call.from_user.username or "",
                    )

    await state.clear()
    try:
        await call.message.delete()
    except:
        pass

    if deleted_count:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
        await send_and_track(
            bot=call.bot,
            user_id=call.from_user.id,
            chat_id=call.message.chat.id,
            text=f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–∫–∞–∑(–æ–≤) –∑–∞ {today}",
        )
    else:
        # –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–æ—Å—Ç
        await notify_temp(call, f"üî∏ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ {today} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)


# –û—Ç–º–µ–Ω–∞
@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)
