from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import json, logging, sqlite3, asyncio

from config import MENU_FILE
from llm_client import complete
from utils import edit_or_send, transcribe_voice, notify_temp, send_and_track
from keyboards import show_main_menu, confirm_keyboard
from db import add_order_items

router = Router()
logger = logging.getLogger(__name__)

# –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∏–∑ JSON
with open(MENU_FILE, encoding="utf-8") as f:
    MENU = json.load(f)
MAIN_MENU = MENU["main"]
ADDONS = MENU["addons"]


@router.message()
async def handle_message(message: Message, state: FSMContext, bot):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id

        # —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        try:
            await message.delete()
        except:
            pass

        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å
        if message.voice:
            user_text = await transcribe_voice(bot, message)
            if not user_text:
                return await notify_temp(
                    message, "üó£ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
        else:
            user_text = message.text.strip()
        logger.info(f"[User Input]: {user_text}")

        # –≥–æ—Ç–æ–≤–∏–º –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        main_text = "\n".join(f"- {k}" for k in MAIN_MENU)
        addon_text = "\n".join(f"- {k}" for k in ADDONS)

        system_instructions = f"""
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.

–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å —Ü–µ–Ω–∞–º–∏:
–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:
{main_text}

–î–æ–±–∞–≤–∫–∏:
{addon_text}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
‚Äì –û–ø—Ä–µ–¥–µ–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (it), –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å **—Ç–æ–ª—å–∫–æ** –Ω–∞ "–û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö".
‚Äì –ö –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∂–∏:
  ‚Ä¢ n ‚Äî item_name —Å—Ç—Ä–æ–≥–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
  ‚Ä¢ q ‚Äî quantity (—Ü–µ–ª–æ–µ, default=1)
  ‚Ä¢ a ‚Äî —Å–ø–∏—Å–æ–∫ addons (–∏–º—è –∏ —Ü–µ–Ω–∞ –∏–∑ ADDONS, –∏–Ω–∞—á–µ price=0)
‚Äì –û–ø—Ä–µ–¥–µ–ª–∏ pay:
  ‚Ä¢ 1 ‚Äî –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π
  ‚Ä¢ 0 ‚Äî –ù–∞–ª–∏—á–Ω—ã–π
  ‚Ä¢ -1 ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω–æ

**–í–∞–∂–Ω–æ**:
‚Äì –í n —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑ "–û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π".
‚Äì –í a —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–±–∞–≤–æ–∫ –∏–ª–∏ –Ω–æ–≤—ã–µ (free).

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç —Å:
- "it": [...]
- "pay": number

–ü—Ä–∏–º–µ—Ä—ã:

- –ó–∞–ø—Ä–æ—Å: "2 –∞–º–µ—Ä–∏–∫–∞–Ω–æ –Ω–∞–ª–∏—á–∫–æ–π"
{{
  "it":[
    {{"n":"–ê–º–µ—Ä–∏–∫–∞–Ω–æ","q":2,"a":[]}}
  ],
  "pay":0
}}

- –ó–∞–ø—Ä–æ—Å: "–ª–∞—Ç—Ç–µ —Å —à–æ–∫–æ–ª–∞–¥–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º –∏ –∫–∞–ø—É—á–∏–Ω–æ —Å —Ñ–∏—Å—Ç–∞—à–∫–æ–≤—ã–º —Å–∏—Ä–æ–ø–æ–º –Ω–∞ –∫–∞—Ä—Ç—É"
{{
  "it":[
    {{"n":"–õ–∞—Ç—Ç–µ","q":1,"a":["–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å–∏—Ä–æ–ø"]}},
    {{"n":"–ö–∞–ø—É—á–∏–Ω–æ","q":1,"a":["–§–∏—Å—Ç–∞—à–∫–æ–≤—ã–π —Å–∏—Ä–æ–ø"]}}
  ],
  "pay":1
}}

- –ó–∞–ø—Ä–æ—Å: "—á–∞–π —Å –≥—Ä—É—à–µ–π —Ä–æ–º–∞—à–∫–æ–≤—ã–π –∏ —Ä–æ–π–±—É—à –Ω–∞ –∫–æ–∫–æ—Å–æ–≤–æ–º –º–æ–ª–æ–∫–µ –ø–µ—Ä–µ–≤–æ–¥"
{{
  "it":[
    {{"n":"–ß–∞–π: –†–æ–º–∞—à–∫–æ–≤—ã–π —Å –≥—Ä—É—à–µ–π","q":1,"a":[]}},
    {{"n":"–ß–∞–π: –†–æ–π–±—É—à –°–∞–º—É—Ä–∞–π","q":1,"a":["–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–æ–ª–æ–∫–æ (–º–∏–Ω–¥–∞–ª—å/–∫–æ–∫–æ—Å)"]}}
  ],
  "pay":1
}}

–ù–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ JSON.
""".strip()

        prompt_messages = [
            {"role": "system", "content": system_instructions},
            {"role": "user", "content": user_text},
        ]
        logger.debug(prompt_messages)

        reply = await complete(prompt_messages)
        logger.info(f"[LLM reply]: {reply}")

        # –ø–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        try:
            result = json.loads(reply)
            raw_items = result.get("it", [])
            pay_code = int(result.get("pay", -1))
        except json.JSONDecodeError:
            return await notify_temp(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.")

        # —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ pay
        pay_text = ""
        if pay_code == 0:
            pay_text = "–ù–∞–ª–∏—á–Ω—ã–π"
        elif pay_code == 1:
            pay_text = "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        normalized = []
        for entry in raw_items:
            name = entry.get("n", "").strip()
            if name not in MAIN_MENU:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: '{name}'")
                continue
            qty = int(entry.get("q", 1))
            addons_raw = entry.get("a", [])
            addons_info = []
            for addon in addons_raw:
                ad = addon.strip()
                addons_info.append({"name": ad, "price": ADDONS.get(ad, 0)})
            price = MAIN_MENU[name]
            for _ in range(qty):
                normalized.append(
                    {
                        "item_name": name,
                        "quantity": 1,
                        "price": price,
                        "addons": addons_info,
                        "payment_type": pay_text,
                    }
                )
        if not normalized:
            return await notify_temp(message, "‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é.")

        await state.update_data(items=normalized)
        await state.set_state("awaiting_add_confirmation")

        total = sum(
            it["price"] + sum(a["price"] for a in it["addons"]) for it in normalized
        )
        lines = []
        for i, it in enumerate(normalized, 1):
            lines.append(f"{i}) {it['item_name']} ‚Äî {it['price']}‚ÇΩ")
            for a in it["addons"]:
                lines.append(f"   ‚Ä¢ {a['name']} ‚Äî {a['price']}‚ÇΩ")

        kb = confirm_keyboard("‚úÖ –î–æ–±–∞–≤–∏—Ç—å", "confirm_add", "cancel_add")
        await edit_or_send(
            bot,
            user_id,
            chat_id,
            f"üîπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ (–æ–ø–ª–∞—Ç–∞: <b>{pay_text or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</b>):\n"
            + "\n".join(lines)
            + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>",
            kb,
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await notify_temp(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑.")


@router.callback_query(F.data == "confirm_add")
async def confirm_add(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    items = data.get("items", [])
    if not items:
        return await notify_temp(call, "‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")
    for _ in range(3):
        try:
            add_order_items(items, call.from_user.id, call.from_user.username or "")
            break
        except sqlite3.OperationalError as err:
            if "locked" in str(err).lower():
                await asyncio.sleep(0.5)
                continue
            return await notify_temp(call, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    try:
        await call.message.delete()
    except:
        pass
    total = sum(it["price"] + sum(a["price"] for a in it["addons"]) for it in items)
    lines = []
    for i, it in enumerate(items, 1):
        lines.append(f"{i}) {it['item_name']} ‚Äî {it['price']}‚ÇΩ")
        for a in it["addons"]:
            lines.append(f"   ‚Ä¢ {a['name']} ‚Äî {a['price']}‚ÇΩ")
    await send_and_track(
        call.bot,
        call.from_user.id,
        call.message.chat.id,
        f"‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω (–æ–ø–ª–∞—Ç–∞: <b>{items[0]['payment_type']}</b>):\n"
        + "\n".join(lines)
        + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>",
    )
    await state.clear()
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)


@router.callback_query(F.data == "cancel_add")
async def cancel_add(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.delete()
    except:
        pass
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)
