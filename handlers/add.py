import json
import logging
import re

from rapidfuzz import process, fuzz
from nltk.stem.snowball import SnowballStemmer

from datetime import datetime
from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext

from config import MENU_FILE
from states import OrderFSM
from db import add_order
from utils import edit_or_send, user_last_bot_message

router = Router()
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
with open(MENU_FILE, encoding="utf-8") as f:
    MENU_MAP = json.load(f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π —Å—Ç–µ–º–º–µ—Ä
stemmer = SnowballStemmer("russian")


def normalize(text: str) -> str:
    """
    –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä + —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ –±—É–∫–≤/—Ü–∏—Ñ—Ä +
    —Å—Ç–µ–º–º–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
    """
    text = text.lower()
    tokens = re.findall(r"\w+", text)
    stems = [stemmer.stem(tok) for tok in tokens]
    return " ".join(stems)


# –°—Ç—Ä–æ–∏–º –º–∞–ø–ø–∏–Ω–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π ‚Üí –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
NORMS = {}
for full_key in MENU_MAP.keys():
    norm = normalize(full_key)
    NORMS[norm] = full_key
NORM_KEYS = list(NORMS.keys())


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 1) –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "add")
async def add_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(OrderFSM.awaiting_item_name)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]
        ]
    )
    await edit_or_send(
        call.bot,
        call.from_user.id,
        call.message.chat.id,
        "üîπ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –∏–ª–∏ –¥–µ—Å–µ—Ä—Ç–∞:",
        kb,
    )
    await call.answer()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.message(OrderFSM.awaiting_item_name)
async def item_name_entered(message: Message, state: FSMContext):
    await message.delete()
    user_input = message.text.strip()
    user_norm = normalize(user_input)

    # –ò—â–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    match = process.extractOne(
        query=user_norm,
        choices=NORM_KEYS,
        scorer=fuzz.token_sort_ratio,
    )
    print(match)
    if not match or match[1] < 15:
        return await message.answer(
            "‚ùå –ù–µ –Ω–∞—à—ë–ª –≤ –º–µ–Ω—é –Ω–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–æ—á–Ω–µ–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ."
        )

    norm_key, score, _ = match
    full_key = NORMS[norm_key]
    category, item_name = (part.strip() for part in full_key.split(":", 1))
    price = MENU_MAP[full_key]
    logger.info(f"Matched ¬´{full_key}¬ª with score={score}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(
        item_name=item_name,
        category=category,
        price=price,
    )
    await state.set_state(OrderFSM.awaiting_payment_type)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–ª–∞—Ç—É
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–π", callback_data="pay_cash")],
            [InlineKeyboardButton(text="–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π", callback_data="pay_card")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")],
        ]
    )
    await edit_or_send(
        message.bot,
        message.from_user.id,
        message.chat.id,
        f"üîπ –ù–∞–π–¥–µ–Ω–æ: ¬´{item_name}¬ª ({category}), —Ü–µ–Ω–∞ {price}‚ÇΩ "
        f"(—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {int(score)}%).\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
        kb,
    )


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3) –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(
    F.data.in_(["pay_cash", "pay_card"]), F.state == OrderFSM.awaiting_payment_type
)
async def payment_type_selected(call: CallbackQuery, state: FSMContext):
    payment = "–ù–∞–ª–∏—á–Ω—ã–π" if call.data == "pay_cash" else "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
    await state.update_data(payment_type=payment)
    data = await state.get_data()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_add")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")],
        ]
    )
    await edit_or_send(
        call.bot,
        call.from_user.id,
        call.message.chat.id,
        f"üîπ –î–æ–±–∞–≤–∏—Ç—å ¬´{data['payment_type']}, {data['item_name']}¬ª "
        f"({data['category']}, {data['price']}‚ÇΩ)?",
        kb,
    )
    await state.set_state(OrderFSM.awaiting_add_confirmation)
    await call.answer()


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 4) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(
    F.data == "confirm_add", F.state == OrderFSM.awaiting_add_confirmation
)
async def confirm_add(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    add_order(
        payment_type=data["payment_type"],
        item_name=data["item_name"],
        user_id=call.from_user.id,
        username=call.from_user.username or "",
    )
    await call.answer("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await state.clear()
    try:
        await call.message.delete()
    except:
        pass
    from handlers.menu import get_main_menu

    kb = get_main_menu()
    msg = await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    user_last_bot_message[call.from_user.id] = msg.message_id


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 5) –û—Ç–º–µ–Ω–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "cancel_add")
async def cancel_add(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.delete()
    except:
        pass
    from handlers.menu import get_main_menu

    kb = get_main_menu()
    msg = await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    user_last_bot_message[call.from_user.id] = msg.message_id
