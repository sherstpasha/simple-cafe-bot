from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import json, logging, sqlite3, asyncio

from config import MENU_FILE, GROUP_CHAT_ID
from llm_client import complete
from utils import (
    edit_or_send,
    transcribe_voice,
    notify_temp,
    send_and_track,
    check_membership,
)
from keyboards import show_main_menu, confirm_keyboard
from db import add_order_items

router = Router()
logger = logging.getLogger(__name__)

# –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∏–∑ JSON
with open(MENU_FILE, encoding="utf-8") as f:
    MENU = json.load(f)
MAIN_MENU = MENU["main"]
ADDONS = MENU["addons"]


@router.message(F.chat.type == "private", F.voice)
@router.message(F.chat.type == "private", F.text & ~F.text.startswith("/"))
async def handle_message(message: Message, state: FSMContext, bot):

    user_id = message.from_user.id
    if not await check_membership(bot, user_id):
        return await notify_temp(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã.")

    try:
        user_id = message.from_user.id
        chat_id = message.chat.id

        # —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        try:
            await message.delete()
        except:
            pass

        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å
        if message.voice:
            user_text = await transcribe_voice(bot, message)
            if not user_text:
                return await notify_temp(
                    message, "üó£ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
        else:
            user_text = message.text.strip()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(raw_text=user_text)
        logger.info(f"[User Input]: {user_text}")

        # –≥–æ—Ç–æ–≤–∏–º –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        main_text = "\n".join(f"- {k}" for k in MAIN_MENU)
        addon_text = "\n".join(f"- {k}" for k in ADDONS)

        # —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –±–µ–∑ f-—Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å JSON-–ø—Ä–∏–º–µ—Ä—ã
        system_instructions = (
            "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n\n"
            "–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Å —Ü–µ–Ω–∞–º–∏:\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n" + main_text + "\n\n–î–æ–±–∞–≤–∫–∏:\n" + addon_text + "\n\n"
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n"
            '‚Äì –û–ø—Ä–µ–¥–µ–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (it), –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å **—Ç–æ–ª—å–∫–æ** –Ω–∞ "–û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö".\n'
            "‚Äì –ö –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∂–∏:\n"
            "  ‚Ä¢ n ‚Äî item_name —Å—Ç—Ä–æ–≥–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é\n"
            "  ‚Ä¢ q ‚Äî quantity (—Ü–µ–ª–æ–µ, default=1)\n"
            "  ‚Ä¢ a ‚Äî —Å–ø–∏—Å–æ–∫ addons (–∏–º—è –∏ —Ü–µ–Ω–∞ –∏–∑ ADDONS, –∏–Ω–∞—á–µ price=0)\n"
            "‚Äì –û–ø—Ä–µ–¥–µ–ª–∏ pay:\n"
            "  ‚Ä¢ 1 ‚Äî –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π\n"
            "  ‚Ä¢ 0 ‚Äî –ù–∞–ª–∏—á–Ω—ã–π\n"
            "  ‚Ä¢ -1 ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
            "**–í–∞–∂–Ω–æ**:\n"
            '‚Äì –í n —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑ "–û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π".\n'
            "‚Äì –í a —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–±–∞–≤–æ–∫ –∏–ª–∏ –Ω–æ–≤—ã–µ (free).\n\n"
            "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç —Å:\n"
            '- "it": [...]\n'
            '- "pay": number\n\n'
            "–ü—Ä–∏–º–µ—Ä—ã:\n\n"
            '- –ó–∞–ø—Ä–æ—Å: "2 –∞–º–µ—Ä–∏–∫–∞–Ω–æ –Ω–∞–ª–∏—á–∫–æ–π"\n'
            "{\n"
            '  "it":[\n'
            '    {"n":"–ê–º–µ—Ä–∏–∫–∞–Ω–æ","q":2,"a":[]}\n'
            "  ],\n"
            '  "pay":0\n'
            "}\n\n"
            '- –ó–∞–ø—Ä–æ—Å: "–ª–∞—Ç—Ç–µ —Å —à–æ–∫–æ–ª–∞–¥–Ω—ã–º —Å–∏—Ä–æ–ø–æ–º –∏ –∫–∞–ø—É—á–∏–Ω–æ —Å —Ñ–∏—Å—Ç–∞—à–∫–æ–≤—ã–º —Å–∏—Ä–æ–ø–æ–º –Ω–∞ –∫–∞—Ä—Ç—É"\n'
            "{\n"
            '  "it":[\n'
            '    {"n":"–õ–∞—Ç—Ç–µ","q":1,"a":["–®–æ–∫–æ–ª–∞–¥–Ω—ã–π —Å–∏—Ä–æ–ø"]},\n'
            '    {"n":"–ö–∞–ø—É—á–∏–Ω–æ","q":1,"a":["–§–∏—Å—Ç–∞—à–∫–æ–≤—ã–π —Å–∏—Ä–æ–ø"]}\n'
            "  ],\n"
            '  "pay":1\n'
            "}\n\n"
            '- –ó–∞–ø—Ä–æ—Å: "—á–∞–π —Å –≥—Ä—É—à–µ–π —Ä–æ–º–∞—à–∫–æ–≤—ã–π –∏ —Ä–æ–π–±—É—à –Ω–∞ –∫–æ–∫–æ—Å–æ–≤–æ–º –º–æ–ª–æ–∫–µ –ø–µ—Ä–µ–≤–æ–¥"\n'
            "{\n"
            '  "it":[\n'
            '    {"n":"–ß–∞–π: –†–æ–º–∞—à–∫–æ–≤—ã–π —Å –≥—Ä—É—à–µ–π","q":1,"a":[]},\n'
            '    {"n":"–ß–∞–π: –†–æ–π–±—É—à –°–∞–º—É—Ä–∞–π","q":1,"a":["–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –º–æ–ª–æ–∫–æ (–º–∏–Ω–¥–∞–ª—å/–∫–æ–∫–æ—Å)"]}\n'
            "  ],\n"
            '  "pay":1\n'
            "}\n\n"
            "–ù–∏–∫–∞–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ JSON."
        )

        prompt_messages = [
            {"role": "system", "content": system_instructions},
            {"role": "user", "content": user_text},
        ]
        logger.debug(prompt_messages)

        reply = await complete(prompt_messages)
        logger.info(f"[LLM reply]: {reply}")

        # –ø–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        try:
            result = json.loads(reply)
            raw_items = result.get("it", [])
            pay_code = int(result.get("pay", -1))
        except json.JSONDecodeError:
            return await notify_temp(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.")

        # —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ pay
        pay_text = ""
        if pay_code == 0:
            pay_text = "–ù–∞–ª–∏—á–Ω—ã–π"
        elif pay_code == 1:
            pay_text = "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
        # –µ—Å–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, —Å—Ç–∞–≤–∏–º –º–µ—Ç–∫—É "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if not pay_text:
            pay_text = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        normalized = []
        for entry in raw_items:
            name = entry.get("n", "").strip()
            if name not in MAIN_MENU:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: '{name}'")
                continue
            qty = int(entry.get("q", 1))
            addons_raw = entry.get("a", [])
            addons_info = []
            for addon in addons_raw:
                ad = addon.strip()
                addons_info.append({"name": ad, "price": ADDONS.get(ad, 0)})
            price = MAIN_MENU[name]
            for _ in range(qty):
                normalized.append(
                    {
                        "item_name": name,
                        "quantity": 1,
                        "price": price,
                        "addons": addons_info,
                        "payment_type": pay_text,
                    }
                )
        if not normalized:
            return await notify_temp(message, "‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é.")

        await state.update_data(items=normalized)
        await state.set_state("awaiting_add_confirmation")

        total = sum(
            it["price"] + sum(a["price"] for a in it["addons"]) for it in normalized
        )
        lines = []
        for i, it in enumerate(normalized, 1):
            lines.append(f"{i}) {it['item_name']} ‚Äî {it['price']}‚ÇΩ")
            for a in it["addons"]:
                lines.append(f"   ‚Ä¢ {a['name']} ‚Äî {a['price']}‚ÇΩ")

        kb = confirm_keyboard("‚úÖ –î–æ–±–∞–≤–∏—Ç—å", "confirm_add", "cancel_add")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Å–≤–µ—Ä—Ö—É
        prompt = (
            f"üîπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ (–æ–ø–ª–∞—Ç–∞: <b>{pay_text}</b>)\n\n"
            f"–ó–∞–ø—Ä–æ—Å: <i>{user_text}</i>\n\n"
            + "\n".join(lines)
            + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>"
        )
        await edit_or_send(
            bot,
            user_id,
            chat_id,
            prompt,
            kb,
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await notify_temp(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑.")


@router.callback_query(F.data == "confirm_add")
async def confirm_add(call: CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    items = data.get("items", [])
    raw_text = data.get("raw_text", "")

    if not items:
        return await notify_temp(call, "‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    for _ in range(3):
        try:
            add_order_items(
                items,
                call.from_user.id,
                call.from_user.username or "",
                raw_text,
            )
            break
        except sqlite3.OperationalError as err:
            if "locked" in str(err).lower():
                await asyncio.sleep(0.5)
                continue
            return await notify_temp(call, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        await call.message.delete()
    except:
        pass

    # –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    total = sum(it["price"] + sum(a["price"] for a in it["addons"]) for it in items)
    lines = []
    for i, it in enumerate(items, 1):
        lines.append(f"{i}) {it['item_name']} ‚Äî {it['price']}‚ÇΩ")
        for a in it["addons"]:
            lines.append(f"   ‚Ä¢ {a['name']} ‚Äî {a['price']}‚ÇΩ")

    confirmation = (
        f"‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω (–æ–ø–ª–∞—Ç–∞: <b>{items[0]['payment_type']}</b>)\n\n"
        f"–ó–∞–ø—Ä–æ—Å: <i>{raw_text}</i>\n\n"
        + "\n".join(lines)
        + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>"
    )

    # 1) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_and_track(
        call.bot,
        call.from_user.id,
        call.message.chat.id,
        confirmation,
    )

    # 2) –¥—É–±–ª–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    try:
        await call.bot.send_message(
            GROUP_CHAT_ID,
            f"üì£ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{call.from_user.username or call.from_user.id}</b>\n\n"
            + confirmation,
            parse_mode="HTML",
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}: {e}")

    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)


@router.callback_query(F.data == "cancel_add")
async def cancel_add(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.delete()
    except:
        pass
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)
