# handlers/add.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import json, logging, re, ast, sqlite3, asyncio

from mistralai import Mistral
from config import MENU_FILE, MISTRAL_API_KEY, MISTRAL_MODEL
from utils import edit_or_send, transcribe_voice, notify_temp, send_and_track
from keyboards import show_main_menu, confirm_keyboard
from db import add_order_items

router = Router()
logger = logging.getLogger(__name__)

# –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∏–∑ JSON
with open(MENU_FILE, encoding="utf-8") as f:
    MENU_MAP = json.load(f)

mistral_client = Mistral(api_key=MISTRAL_API_KEY)


@router.message()
async def handle_message(message: Message, state: FSMContext, bot):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id

        # —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except:
            pass

        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç (–∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å)
        if message.voice:
            user_text = await transcribe_voice(bot, message)
            if not user_text:
                return await notify_temp(
                    message, "üó£ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
        else:
            user_text = message.text.strip()

        logger.info(f"[User Input]: {user_text}")

        # –≥–æ—Ç–æ–≤–∏–º –º–µ–Ω—é –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        menu_text = "\n".join(f"- {k}" for k in MENU_MAP.keys())

        # –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        response = mistral_client.chat.complete(
            model=MISTRAL_MODEL,
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ –∫–∞—Ñ–µ.\n"
                        "–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é:\n"
                        f"{menu_text}\n\n"
                        "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø–∏—Ç–∫–∏/—Ç–æ–≤–∞—Ä—ã) –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏.\n"
                        "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (item_name) **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –º–µ–Ω—é.\n"
                        "–î–æ–±–∞–≤–∫–∏ (addons) –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–º–∏: –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é ‚Äî –∏—Ö —Ü–µ–Ω–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –º–µ–Ω—é, "
                        "–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ (0‚ÇΩ).\n\n"
                        "–û–ø–ª–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –¥–≤—É—Ö –≤–∏–¥–æ–≤: **–ù–∞–ª–∏—á–Ω—ã–π** –∏–ª–∏ **–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π**.\n"
                        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å ¬´–∫–∞—Ä—Ç–æ–π¬ª, ¬´–∫–∞—Ä—Ç–∞¬ª, ¬´–ø–µ—Ä–µ–≤–æ–¥¬ª –∏ —Ç.–ø. ‚Äî –≤—ã–±–µ—Ä–∏ **–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π**; "
                        "–µ—Å–ª–∏ ¬´–Ω–∞–ª–∏—á–Ω—ã–º–∏¬ª, ¬´–Ω–∞–ª–∏—á–∫–∞¬ª –∏ —Ç.–ø. ‚Äî **–ù–∞–ª–∏—á–Ω—ã–π**. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ.\n\n"
                        "–í –æ—Ç–≤–µ—Ç–µ –°–¢–†–û–ì–û —Å–Ω–∞—á–∞–ª–∞ JSON-–º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π —Å –ø–æ–ª—è–º–∏:\n"
                        "  ‚Ä¢ item_name: —Å—Ç—Ä–æ–∫–∞\n"
                        "  ‚Ä¢ quantity: —á–∏—Å–ª–æ\n"
                        "  ‚Ä¢ addons: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)\n\n"
                        "–ê –∑–∞—Ç–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî payment_type: <–ù–∞–ª–∏—á–Ω—ã–π –∏–ª–∏ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π>.\n\n"
                        "–ü—Ä–∏–º–µ—Ä:\n"
                        "```\n"
                        "[\n"
                        '  {"item_name": "–õ–∞—Ç—Ç–µ", "quantity": 1, "addons": ["–°–∞—Ö–∞—Ä"]},\n'
                        '  {"item_name": "–ê–º–µ—Ä–∏–∫–∞–Ω–æ", "quantity": 2, "addons": []}\n'
                        "]\n"
                        "payment_type: –ù–∞–ª–∏—á–Ω—ã–π\n"
                        "```"
                    ),
                },
                {"role": "user", "content": user_text},
            ],
        )

        reply = response.choices[0].message.content.strip()
        logger.info(f"[LLM reply]: {reply}")

        # –ø–∞—Ä—Å–∏–º payment_type
        m = re.search(r"payment_type:\s*(\w+)", reply, re.IGNORECASE)
        payment_type = m.group(1).capitalize() if m else ""
        if payment_type not in ("–ù–∞–ª–∏—á–Ω—ã–π", "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"):
            return await notify_temp(
                message, "‚ö†Ô∏è –¢–∏–ø –æ–ø–ª–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –£–∫–∞–∂–∏—Ç–µ ¬´–Ω–∞–ª–∏—á–Ω—ã–º–∏¬ª –∏–ª–∏ ¬´–∫–∞—Ä—Ç–æ–π¬ª."
            )

        # –ø–∞—Ä—Å–∏–º JSON-–±–ª–æ–∫
        block = re.search(r"\[.*\]", reply, re.DOTALL)
        raw_items = ast.literal_eval(block.group(0)) if block else []
        if not raw_items:
            return await notify_temp(
                message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞."
            )

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        normalized = []
        for entry in raw_items:
            base = entry.get("item_name", "").strip()
            qty = int(entry.get("quantity", 1))
            addons = entry.get("addons", [])
            # –±–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
            key = next((k for k in MENU_MAP if base.lower() in k.lower()), None)
            if not key:
                continue
            price = MENU_MAP[key]
            name = key.split(":", 1)[-1].strip()

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ add-ons
            addons_info = []
            for a in addons:
                ak = next((k for k in MENU_MAP if a.lower() in k.lower()), None)
                ap = MENU_MAP[ak] if ak else 0
                an = ak.split(":", 1)[-1].strip() if ak else a
                addons_info.append({"name": an, "price": ap})

            for _ in range(qty):
                normalized.append(
                    {
                        "item_name": name,
                        "payment_type": payment_type,
                        "price": price,
                        "quantity": 1,
                        "addons": addons_info,
                    }
                )

        if not normalized:
            return await notify_temp(message, "‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞—à–ª–∞—Å—å –≤ –º–µ–Ω—é.")

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(items=normalized)
        await state.set_state("awaiting_add_confirmation")

        # —Å–æ–±–∏—Ä–∞–µ–º summary
        total = sum(
            it["price"] + sum(a["price"] for a in it["addons"]) for it in normalized
        )
        lines = []
        for i, it in enumerate(normalized, start=1):
            lines.append(f"{i}) {it['item_name']} ‚Äî {it['price']}‚ÇΩ")
            for a in it["addons"]:
                lines.append(f"   ‚Ä¢ {a['name']} ‚Äî {a['price']}‚ÇΩ")

        kb = confirm_keyboard("‚úÖ –î–æ–±–∞–≤–∏—Ç—å", "confirm_add", "cancel_add")
        await edit_or_send(
            bot,
            user_id,
            chat_id,
            f"üîπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ (–æ–ø–ª–∞—Ç–∞: <b>{payment_type}</b>):\n"
            + "\n".join(lines)
            + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>",
            kb,
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await notify_temp(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data == "confirm_add")
async def confirm_add(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    items = data.get("items", [])
    if not items:
        return await notify_temp(call, "‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

    # –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ 3-—Ö —Ä–∞–∑, –µ—Å–ª–∏ –ë–î –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    for _ in range(3):
        try:
            add_order_items(items, call.from_user.id, call.from_user.username or "")
            break
        except sqlite3.OperationalError as err:
            if "locked" in str(err).lower():
                await asyncio.sleep(0.5)
                continue
            else:
                return await notify_temp(
                    call, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    else:
        return await notify_temp(
            call, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

    # —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await call.message.delete()
    except:
        pass

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    total = sum(it["price"] + sum(a["price"] for a in it["addons"]) for it in items)
    lines = []
    for i, it in enumerate(items, start=1):
        lines.append(f"{i}) {it['item_name']} ‚Äî {it['price']}‚ÇΩ")
        for a in it["addons"]:
            lines.append(f"   ‚Ä¢ {a['name']} ‚Äî {a['price']}‚ÇΩ")

    await send_and_track(
        call.bot,
        call.from_user.id,
        call.message.chat.id,
        "‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω (–æ–ø–ª–∞—Ç–∞: <b>{}</b>):\n".format(items[0]["payment_type"])
        + "\n".join(lines)
        + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>",
    )

    await state.clear()
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –û—Ç–º–µ–Ω–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
@router.callback_query(F.data == "cancel_add")
async def cancel_add(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.delete()
    except:
        pass
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)
