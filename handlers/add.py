from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import json, logging, sqlite3, asyncio

from config import MENU_FILE, GROUP_CHAT_ID
from llm_client import parse_order_from_text, LLMParseError
from utils import (
    edit_or_send,
    transcribe_voice,
    notify_temp,
    send_and_track,
    check_membership,
)
from keyboards import show_main_menu, confirm_keyboard
from db import add_order_items

router = Router()
logger = logging.getLogger(__name__)

# –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∏–∑ JSON
with open(MENU_FILE, encoding="utf-8") as f:
    MENU = json.load(f)
MAIN_MENU = MENU["main"]
ADDONS = MENU["addons"]


@router.message(F.chat.type == "private", F.voice)
@router.message(F.chat.type == "private", F.text & ~F.text.startswith("/"))
async def handle_message(message: Message, state: FSMContext, bot):

    user_id = message.from_user.id
    if not await check_membership(bot, user_id):
        return await notify_temp(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã.")

    try:
        user_id = message.from_user.id
        chat_id = message.chat.id

        # —É–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        try:
            await message.delete()
        except:
            pass

        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –≥–æ–ª–æ—Å
        if message.voice:
            user_text = await transcribe_voice(bot, message)
            if not user_text:
                return await notify_temp(
                    message, "üó£ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                )
        else:
            user_text = (message.text or "").strip()

        if not user_text:
            return await notify_temp(message, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ë–î –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(raw_text=user_text)
        logger.info(f"[User Input]: {user_text}")

        # === –µ–¥–∏–Ω—ã–π –≤—ã–∑–æ–≤ –≤ llm_client: –ø—Ä–æ–º–ø—Ç –ª–µ–∂–∏—Ç —Ç–∞–º ===
        try:
            parsed = await parse_order_from_text(user_text, MENU, temperature=0.2)
        except LLMParseError:
            logger.exception("Failed to parse model JSON")
            return await notify_temp(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.")
        except Exception:
            logger.exception("LLM call failed")
            return await notify_temp(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏.")

        raw_items = parsed.get("it", [])
        pay_code = parsed.get("pay", -1)

        # —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ pay
        if pay_code == 0:
            pay_text = "–ù–∞–ª–∏—á–Ω—ã–π"
        elif pay_code == 1:
            pay_text = "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π"
        else:
            pay_text = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        normalized = []
        for entry in raw_items:
            name = (entry.get("n") or entry.get("name") or "").strip()
            if name not in MAIN_MENU:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: '{name}'")
                continue

            try:
                qty = int(entry.get("q", 1))
            except Exception:
                qty = 1
            qty = max(1, qty)

            addons_raw = entry.get("a", [])
            addons_info = []
            for addon in addons_raw:
                ad = str(addon).strip()
                if not ad:
                    continue
                addons_info.append({"name": ad, "price": ADDONS.get(ad, 0)})

            price = MAIN_MENU[name]
            # —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ ‚Äî ¬´—Ä–∞–∑–º–Ω–æ–∂–∞–µ–º¬ª –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (quantity=1 –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ)
            for _ in range(qty):
                normalized.append(
                    {
                        "item_name": name,
                        "quantity": 1,
                        "price": price,
                        "addons": addons_info,
                        "payment_type": pay_text,
                    }
                )

        if not normalized:
            return await notify_temp(message, "‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é.")

        await state.update_data(items=normalized)
        await state.set_state("awaiting_add_confirmation")

        total = sum(
            it["price"] + sum(a["price"] for a in it["addons"]) for it in normalized
        )
        lines = []
        for i, it in enumerate(normalized, 1):
            lines.append(f"{i}) {it['item_name']} ‚Äî {it['price']}‚ÇΩ")
            for a in it["addons"]:
                lines.append(f"   ‚Ä¢ {a['name']} ‚Äî {a['price']}‚ÇΩ")

        kb = confirm_keyboard("‚úÖ –î–æ–±–∞–≤–∏—Ç—å", "confirm_add", "cancel_add")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Å–≤–µ—Ä—Ö—É
        prompt = (
            f"üîπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ (–æ–ø–ª–∞—Ç–∞: <b>{pay_text}</b>)\n\n"
            f"–ó–∞–ø—Ä–æ—Å: <i>{user_text}</i>\n\n"
            + "\n".join(lines)
            + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>"
        )
        await edit_or_send(
            bot,
            user_id,
            chat_id,
            prompt,
            kb,
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await notify_temp(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑.")


@router.callback_query(F.data == "confirm_add")
async def confirm_add(call: CallbackQuery, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    items = data.get("items", [])
    raw_text = data.get("raw_text", "")

    if not items:
        return await notify_temp(call, "‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤–º–µ—Å—Ç–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    for _ in range(3):
        try:
            add_order_items(
                items,
                call.from_user.id,
                call.from_user.username or "",
                raw_text,
            )
            break
        except sqlite3.OperationalError as err:
            if "locked" in str(err).lower():
                await asyncio.sleep(0.5)
                continue
            return await notify_temp(call, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try:
        await call.message.delete()
    except:
        pass

    # –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    total = sum(it["price"] + sum(a["price"] for a in it["addons"]) for it in items)
    lines = []
    for i, it in enumerate(items, 1):
        lines.append(f"{i}) {it['item_name']} ‚Äî {it['price']}‚ÇΩ")
        for a in it["addons"]:
            lines.append(f"   ‚Ä¢ {a['name']} ‚Äî {a['price']}‚ÇΩ")

    confirmation = (
        f"‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω (–æ–ø–ª–∞—Ç–∞: <b>{items[0]['payment_type']}</b>)\n\n"
        f"–ó–∞–ø—Ä–æ—Å: <i>{raw_text}</i>\n\n"
        + "\n".join(lines)
        + f"\n\nüí∞ –ò—Ç–æ–≥–æ: <b>{total}‚ÇΩ</b>"
    )

    # 1) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_and_track(
        call.bot,
        call.from_user.id,
        call.message.chat.id,
        confirmation,
    )

    # 2) –¥—É–±–ª–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    try:
        await call.bot.send_message(
            GROUP_CHAT_ID,
            f"üì£ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{call.from_user.username or call.from_user.id}</b>\n\n"
            + confirmation,
            parse_mode="HTML",
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}: {e}")

    # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)


@router.callback_query(F.data == "cancel_add")
async def cancel_add(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.delete()
    except:
        pass
    await show_main_menu(call.from_user.id, call.message.chat.id, call.bot)
